import  Data.List

let testpat = "this is \" a \" test\nand i \"like\" it"

-- desired output ["this is ", "\" a \" ", " test"] , [[],[],[]] list of lists..

testpat

import System.IO



-- lookup with tokeniser
lookupT :: IO (String)
lookupT = do
            handle <- openFile "Sound/Tidal/easy-input.txt" ReadMode
            contents <- hGetContents handle
            -- apply tokeniser here
            let reformat = toWords $ removePunc (contents)
            return (reformat)

lookupT = do
            handle <- openFile "Users/elizabeth/desktop/tidaldev/tidal-fuzz/src/Sound/Tidal/easy-input.txt" ReadMode
            contents <- hGetContents handle
            let reformat = removePunc (contents)
            print (reformat)




out <- lookupT


import





-- remove unwanted punctuation
removePunc :: [Char] -> [Char]
removePunc xs = [ x | x <- xs, not (x `elem` "*\'()") ]


toWords :: [Char] -> [[Char]]
toWords s = words s


getBeforePattern :: [Char]-> [Char]
getBeforePattern xs = takeWhile (/='\"') xs


getAfterPattern :: [Char] -> [Char]
getAfterPattern xs = if (dropWhile (/='\"') xs)==[]
                      then []
                      else tail(dropWhile (/='\"') xs)

getComponents :: [Char] -> IO ([[Char]])
getComponents xs =
  do let header = getBeforePattern (xs)
         string = getBeforePattern (getAfterPattern xs)
         footer = getAfterPattern (getAfterPattern xs)
     return ([header, string, footer])


     -- get everything before a space character
     before :: String -> String
     before xs = takeWhile (/=' ') xs

     -- get everything after a space character
     after :: String -> String
     after xs = if (dropWhile (/=' ') xs)==[]
                  then []
                  else tail(dropWhile (/=' ') xs)


     -- get everything before line break
     beforeLine :: String -> String
     beforeLine xs = takeWhile (/='\n') xs

     -- get everything after line break..
     afterLine :: String -> String
     afterLine xs = if (dropWhile (/='\n') xs)==[]
                      then []
                      else tail(dropWhile (/='\n') xs)


     -- reformat to a list of words after Line break
     reformatCode :: String -> [String]
     reformatCode [] = []
     reformatCode xs = beforeLine xs : (reformatCode (afterLine xs))

     -- breakup at a space..
     breakupCode :: String -> [String]
     breakupCode [] = []
     breakupCode xs = before xs : (breakupCode (after xs))


getComponents (testpat)


-- todo: split strings from the tidal input text.

import Data.List

remove :: String -> String -> String
remove w [] = []
remove w s@(c:cs)
  | w `isPrefixOf` s = remove w (drop (length w) s)
  | otherwise = c : remove w cs


s1 = "hello world"

remove "hello" s1

s2 = remove w s1
